import asyncio

from web3 import AsyncWeb3, AsyncHTTPProvider
from web3.exceptions import TransactionNotFound

rpc_url = "https://scroll.drpc.org"
explorer_url = 'https://scrollscan.com/'
sender_text = "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
recipient_text = "–ø–æ–ª—É—á–∞—Ç–µ–ª—è"

async def connect_to_blockchain(rpc):
    w3 = AsyncWeb3(AsyncHTTPProvider(rpc))
    if await w3.is_connected():
        # print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return w3
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!")

def get_address_by_input(w3_client, whose):
    while True:
        try:
            address_input = input(f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å {whose}: ")
            return w3_client.to_checksum_address(address_input)
        except ValueError:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")

def get_private_key_by_input():
    private_key = input(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ")
    return private_key

def get_value_for_tx_by_input():
    while True:
        try:
            value = float(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (ETH): "))
            return value
        except ValueError:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (ETH), –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")

async def print_check_balance(w3_client, address, whose, is_after = False):
    balance = await w3_client.eth.get_balance(address)
    if is_after:
        print(f"–ë–∞–ª–∞–Ω—Å {whose} –ø–æ—Å–ª–µ: {w3_client.from_wei(balance, 'ether'):.6f} ETH")
    else:
        print (f"–ë–∞–ª–∞–Ω—Å {whose} –¥–æ: {w3_client.from_wei(balance, 'ether'):.6f} ETH")
    return balance

# –¥–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–µ–π—Å–∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º—Å–æ—Ç–∏ –≥–∞–∑–∞
async def control_balance(w3_client, sender, value):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π."""
    balance = await w3_client.eth.get_balance(sender)
    gas_price = await w3_client.eth.gas_price
    gas_limit = 21000
    total_cost = w3_client.to_wei(value, 'ether') + gas_price * gas_limit

    if balance >= total_cost:
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return False

async def prepare_tx(w3_client, sender_address, recipient_address, value_for_tx):
    transaction = {
        'nonce': await w3_client.eth.get_transaction_count(sender_address),
        'from': sender_address,
        'to': w3_client.to_checksum_address(recipient_address),
        'value': w3_client.to_wei(value_for_tx, 'ether'),
        'gas': 21000,
        'maxPriorityFeePerGas': 0,
        'maxFeePerGas': 0,
        'chainId': await w3_client.eth.chain_id

    }
    # –û—Ü–µ–Ω–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–∞–∑–∞:

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
    base_fee = await w3_client.eth.gas_price
    max_priority_fee_per_gas = await w3_client.eth.max_priority_fee
    max_fee_per_gas = base_fee + max_priority_fee_per_gas
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction['maxPriorityFeePerGas'] = max_priority_fee_per_gas
    transaction['maxFeePerGas'] = int(max_fee_per_gas * 1.5)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
    return transaction

# def sign_tx(w3_client, transaction, private_key):
#     signed_raw_tx  = w3_client.eth.account.sign_transaction(transaction, private_key)
#     print('Successfully signed transaction!')
#     return signed_raw_tx.rawTransaction
#
# async def send_tx(w3_client, signed_raw_tx):
#     tx_hash_bytes = await w3_client.eth.send_raw_transaction(signed_raw_tx)
#     print('Successfully sent transaction!')
#     tx_hash_hex = w3_client.to_hex(tx_hash_bytes)
#     return tx_hash_hex

async def sign_and_send_tx(w3_client, transaction, private_key):
    try:
        signed_raw_tx = w3_client.eth.account.sign_transaction(transaction, private_key).rawTransaction
        # print('Successfully signed transaction!')
        tx_hash_bytes = await w3_client.eth.send_raw_transaction(signed_raw_tx)
        # print('Successfully sent transaction!')
        tx_hash_hex = w3_client.to_hex(tx_hash_bytes)
        return tx_hash_hex
    except Exception as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {error}")
        return None

async def wait_tx(w3_client, tx_hash):
    total_time = 0
    timeout = 120
    poll_latency = 10
    while True:
        try:
            receipt = await w3_client.eth.wait_for_transaction_receipt(tx_hash)
            if receipt.status == 1:
                print(f'\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash}\n')
                print(f'–°—Å—ã–ª–∫–∞: {explorer_url}tx/{tx_hash}')
                return
            elif receipt.status is None:
                await asyncio.sleep(poll_latency)
            else:
                print(f'\nTransaction failed: {explorer_url}tx/{tx_hash}\n')
        except TransactionNotFound:
            if total_time > timeout:
                print(f"\nTransaction is not in the chain after {timeout} seconds\n")
            total_time += poll_latency
            await asyncio.sleep(poll_latency)

async def main():
    w3 = await connect_to_blockchain(rpc_url)
    if not w3:
        return

    address_sender = get_address_by_input(w3, sender_text)
    private_key =  get_private_key_by_input()
    address_recipient = get_address_by_input(w3, recipient_text)
    value_for_tx = get_value_for_tx_by_input()

    print("\n")
    await print_check_balance(w3, address_sender, sender_text)
    await print_check_balance(w3, address_recipient, recipient_text)
    print("\n")

    if await control_balance(w3, address_sender, value_for_tx):
        print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        transaction_prepared = await prepare_tx(w3, address_sender, address_recipient,value_for_tx)
        tx_hash_hex = await sign_and_send_tx(w3, transaction_prepared, private_key)
        if tx_hash_hex:
            await wait_tx(w3, tx_hash_hex)

            await print_check_balance(w3, address_sender, sender_text, True)
            await print_check_balance(w3, address_recipient, recipient_text, True)
        else:
            print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤.")

if __name__ == "__main__":
    asyncio.run(main())
